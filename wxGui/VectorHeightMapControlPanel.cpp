// -*- C++ -*- generated by wxGlade 0.4.1 on Mon Oct  8 14:50:01 2007

#include "VectorHeightMapControlPanel.h"
#include "LookupTableUtil.h"

VectorHeightMapVisualization::Pointer VectorHeightMapControlPanel::GetPipeline()
{
    return this->pipeline;
}

void VectorHeightMapControlPanel::SetPipeline(VectorHeightMapVisualization::Pointer pipeline)
{
    this->pipeline = pipeline;
    this->TransferDataToWindow();
}

VectorHeightMapControlPanel::VectorHeightMapControlPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: VectorHeightMapControlPanel::VectorHeightMapControlPanel
    sizer_56_staticbox = new wxStaticBox(this, -1, wxT("Vector Height Map"));
    checkVisible = new wxCheckBox(this, CBX_VISIBLE, wxT("Visible"));
    label_46 = new wxStaticText(this, wxID_ANY, wxT("Color Map"));
    const wxString comboColorMapType_choices[] = {
        wxT("Red Green"),
        wxT("Blue Yellow"),
        wxT("Red Yellow Gray"),
        wxT("CIE"),
        wxT("Gray")
    };
    comboColorMapType = new wxComboBox(this, CMB_COLOR_MAP_TYPE, wxT(""), wxDefaultPosition, wxDefaultSize, 5, comboColorMapType_choices, wxCB_DROPDOWN|wxCB_READONLY);
    label_47 = new wxStaticText(this, wxID_ANY, wxT("Maximum"));
    slideColorMapMaximum = new wxDoubleSlider(this, SLD_COLOR_MAP_MAXIMUM);
    label_48 = new wxStaticText(this, wxID_ANY, wxT("Minimum"));
    slideColorMapMinimum = new wxDoubleSlider(this, SLD_COLOR_MAP_MINIMUM);
    label_52 = new wxStaticText(this, wxID_ANY, wxT("Scale Factor"));
    slideScaleFactor = new wxDoubleSlider(this, SLD_SCALE_FACTOR);
    label_53 = new wxStaticText(this, wxID_ANY, wxT("Magnitude Function"));
    const wxString comboMagnitudeFunction_choices[] = {
        wxT("Vector Magnitude"),
        wxT("X Component"),
        wxT("Y Component")
    };
    comboMagnitudeFunction = new wxComboBox(this, CMB_MAGNITUDE_FUNCTION, wxT(""), wxDefaultPosition, wxDefaultSize, 3, comboMagnitudeFunction_choices, wxCB_DROPDOWN|wxCB_READONLY);

    set_properties();
    do_layout();
    // end wxGlade
    
    this->slideScaleFactor->SetRange(1.0, 500.0, 1.0);
    this->slideScaleFactor->SetValue(1.0);
}


BEGIN_EVENT_TABLE(VectorHeightMapControlPanel, wxPanel)
    EVT_SLIDER(SLD_SCALE_FACTOR, VectorHeightMapControlPanel::OnScaleFactor)
    // begin wxGlade: VectorHeightMapControlPanel::event_table
    EVT_CHECKBOX(CBX_VISIBLE, VectorHeightMapControlPanel::OnVisible)
    EVT_COMBOBOX(CMB_COLOR_MAP_TYPE, VectorHeightMapControlPanel::OnColorMapType)
    EVT_COMBOBOX(CMB_MAGNITUDE_FUNCTION, VectorHeightMapControlPanel::OnMagnitudeFunction)
    // end wxGlade
END_EVENT_TABLE();

bool VectorHeightMapControlPanel::TransferDataToWindow()
{
    if (this->pipeline && this->pipeline.IsNotNull())
    {
        this->slideScaleFactor->SetValue(this->pipeline->GetScaleFactor());
        switch (this->pipeline->GetColorMapType())
        {
            case RedGreen:
                this->comboColorMapType->SetValue(wxT("Red Green"));
                break;
            case BlueYellow:
                this->comboColorMapType->SetValue(wxT("Blue Yellow"));
                break;
            case RedYellowGray:
                this->comboColorMapType->SetValue(wxT("Red Yellow Gray"));
                break;
            case CIE:
                this->comboColorMapType->SetValue(wxT("CIE"));
                break;
            case IsoGray:
            default:
                this->comboColorMapType->SetValue(wxT("Gray"));
                break;
        }
        switch (this->pipeline->GetMagnitudeFunction())
        {
            case VectorHeightMapVisualization::XComponent:
                this->comboMagnitudeFunction->SetValue(wxT("X Component"));
                break;
            case VectorHeightMapVisualization::YComponent:
                this->comboMagnitudeFunction->SetValue(wxT("Y Component"));
                break;
            case VectorHeightMapVisualization::VectorMagnitude:
            default:
                this->comboMagnitudeFunction->SetValue(wxT("Vector Magnitude"));
                break;
        }
    }

    return true;
}

void VectorHeightMapControlPanel::OnVisible(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
        this->pipeline->SetVisibility(this->checkVisible->IsChecked());
}


void VectorHeightMapControlPanel::OnColorMapType(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
    {
        wxString val(this->comboColorMapType->GetValue());
        if (val.IsSameAs(wxT("Red Green")))
            this->pipeline->SetColorMapType(RedGreen);
        else if (val.IsSameAs(wxT("Blue Yellow")))
            this->pipeline->SetColorMapType(BlueYellow);
        else if (val.IsSameAs(wxT("Red Yellow Gray")))
            this->pipeline->SetColorMapType(RedYellowGray);
        else if (val.IsSameAs(wxT("CIE")))
            this->pipeline->SetColorMapType(CIE);
        else // Gray
            this->pipeline->SetColorMapType(IsoGray);
    }
}


void VectorHeightMapControlPanel::OnMagnitudeFunction(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
    {
        wxString val(this->comboMagnitudeFunction->GetValue());
        if (val.IsSameAs(wxT("X Component")))
            this->pipeline->SetMagnitudeFunction(VectorHeightMapVisualization::XComponent);
        else if(val.IsSameAs(wxT("Y Component")))
            this->pipeline->SetMagnitudeFunction(VectorHeightMapVisualization::YComponent);
        else // Vector Magnitude
            this->pipeline->SetMagnitudeFunction(VectorHeightMapVisualization::VectorMagnitude);
    }
}

void VectorHeightMapControlPanel::OnScaleFactor(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
        this->pipeline->SetScaleFactor(this->slideScaleFactor->GetValue());
}

// wxGlade: add VectorHeightMapControlPanel event handlers


void VectorHeightMapControlPanel::set_properties()
{
    // begin wxGlade: VectorHeightMapControlPanel::set_properties
    checkVisible->SetValue(1);
    comboColorMapType->SetSelection(0);
    label_47->Hide();
    slideColorMapMaximum->Hide();
    label_48->Hide();
    slideColorMapMinimum->Hide();
    comboMagnitudeFunction->SetSelection(0);
    // end wxGlade
}


void VectorHeightMapControlPanel::do_layout()
{
    // begin wxGlade: VectorHeightMapControlPanel::do_layout
    wxBoxSizer* sizer_55 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_56 = new wxStaticBoxSizer(sizer_56_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_20 = new wxFlexGridSizer(6, 2, 5, 5);
    grid_sizer_20->Add(checkVisible, 0, 0, 0);
    grid_sizer_20->Add(20, 20, 0, 0, 0);
    grid_sizer_20->Add(label_46, 0, 0, 0);
    grid_sizer_20->Add(comboColorMapType, 0, wxEXPAND, 0);
    grid_sizer_20->Add(label_47, 0, 0, 0);
    grid_sizer_20->Add(slideColorMapMaximum, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_48, 0, 0, 0);
    grid_sizer_20->Add(slideColorMapMinimum, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_52, 0, 0, 0);
    grid_sizer_20->Add(slideScaleFactor, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_53, 0, 0, 0);
    grid_sizer_20->Add(comboMagnitudeFunction, 0, wxEXPAND, 0);
    grid_sizer_20->AddGrowableCol(1);
    sizer_56->Add(grid_sizer_20, 1, wxEXPAND, 0);
    sizer_55->Add(sizer_56, 1, wxEXPAND, 0);
    SetSizer(sizer_55);
    sizer_55->Fit(this);
    // end wxGlade
}

