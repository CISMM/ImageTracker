// -*- C++ -*- generated by wxGlade 0.4.1 on Mon Oct  1 16:19:36 2007

#include "wxDoubleSlider.h"

#include "wxUtils.h"

wxDoubleSlider::wxDoubleSlider(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxNO_BORDER|wxTAB_TRAVERSAL)
{
    // begin wxGlade: wxDoubleSlider::wxDoubleSlider
    sldSlider = new wxSlider(this, -1, 0, 0, 10);
    textValue = new wxTextCtrl(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    labelMinimum = new wxStaticText(this, -1, wxT("0"));
    labelMaximum = new wxStaticText(this, -1, wxT("0"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);

    set_properties();
    do_layout();
    // end wxGlade
    
    // defaults
    this->enforceRange = false;
    this->SetRange(0.0, 1.0);
    this->SetValue(0.0);
    this->SetFormat("%.2f");
}

wxDoubleSlider::~wxDoubleSlider()
{}

BEGIN_EVENT_TABLE(wxDoubleSlider, wxPanel)
    // begin wxGlade: wxDoubleSlider::event_table
    EVT_COMMAND_SCROLL(-1, wxDoubleSlider::OnSlider)
    EVT_TEXT_ENTER(-1, wxDoubleSlider::OnText)
    // end wxGlade
END_EVENT_TABLE();


void wxDoubleSlider::OnSlider(wxScrollEvent &event)
{
    this->value = this->SliderToDouble();
    this->textValue->SetValue(wxString::Format(this->format, this->value));
    this->GenerateEvent();
}


void wxDoubleSlider::OnText(wxCommandEvent &event)
{
    double val;
    bool isDouble = this->textValue->GetValue().ToDouble(&val);
    if (isDouble && val != this->value && this->CheckRange(val))
    {
        this->value = val;
        this->sldSlider->SetValue(this->DoubleToSlider());
        this->GenerateEvent();
    }
    else // invalid stuff entered, e.g. text
    {
        this->textValue->SetValue(wxString::Format(this->format, this->value));
    }
}


// wxGlade: add wxDoubleSlider event handlers

void wxDoubleSlider::GenerateEvent()
{
    if (this->GetParent())
    {
        wxCommandEvent evt(wxEVT_COMMAND_SLIDER_UPDATED, this->GetId());
        evt.SetEventObject(this);
        evt.SetString(this->textValue->GetValue());
        this->GetParent()->GetEventHandler()->ProcessEvent(evt);
    }
}

bool wxDoubleSlider::CheckRange(double val)
{
    return (!this->enforceRange) || (val >= this->minimum && val <= this->maximum);
}

bool wxDoubleSlider::GetEnforceRange()
{
    return this->enforceRange;
}

void wxDoubleSlider::SetEnforceRange(bool enforce)
{
    this->enforceRange = enforce;
}

double wxDoubleSlider::GetValue()
{
    return this->value;
}

double wxDoubleSlider::GetMin()
{
    return this->minimum;
}

double wxDoubleSlider::GetMax()
{
    return this->maximum;
}

void wxDoubleSlider::SetValue(double value)
{
    if (this->CheckRange(value))
    {
        this->value = value;
        this->textValue->SetValue(wxString::Format(this->format, this->value));
        this->sldSlider->SetValue(this->DoubleToSlider());
    }
}

void wxDoubleSlider::SetRange(double min, double max, double interval)
{
    this->minimum = min;
    this->maximum = max;
    this->interval = interval;
    
    // Compute number of ticks to use for an integer-based slider
    int ticks = static_cast<int>((this->maximum - this->minimum) / this->interval) + 1;
    this->sldSlider->SetRange(0, ticks);

    // Create min and max labels
    this->labelMinimum->SetLabel(wxString::Format(this->format, this->minimum));
    this->labelMaximum->SetLabel(wxString::Format(this->format, this->maximum));
    
    // Keep slider position in sync with value
    this->sldSlider->SetValue(this->DoubleToSlider());
}

void wxDoubleSlider::SetFormat(const std::string& format)
{
    this->format = std2wx(format);
    this->labelMinimum->SetLabel(wxString::Format(this->format, this->minimum));
    this->labelMaximum->SetLabel(wxString::Format(this->format, this->maximum));
    this->textValue->SetValue(wxString::Format(this->format, this->value));
}

int wxDoubleSlider::DoubleToSlider()
{
    return this->sldSlider->GetMin() + 
            static_cast<int>((this->value - this->minimum) / this->interval);
}

double wxDoubleSlider::SliderToDouble()
{
    return this->minimum + this->interval * this->sldSlider->GetValue();
}

void wxDoubleSlider::set_properties()
{
    // begin wxGlade: wxDoubleSlider::set_properties
    // end wxGlade
}


void wxDoubleSlider::do_layout()
{
    // begin wxGlade: wxDoubleSlider::do_layout
    wxFlexGridSizer* grid_sizer_18 = new wxFlexGridSizer(2, 2, 5, 5);
    wxBoxSizer* sizer_47 = new wxBoxSizer(wxHORIZONTAL);
    grid_sizer_18->Add(sldSlider, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_18->Add(textValue, 0, wxADJUST_MINSIZE, 0);
    sizer_47->Add(labelMinimum, 1, wxEXPAND|wxADJUST_MINSIZE, 0);
    sizer_47->Add(labelMaximum, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_18->Add(sizer_47, 1, wxEXPAND, 0);
    grid_sizer_18->Add(20, 20, 0, wxADJUST_MINSIZE, 0);
    SetAutoLayout(true);
    SetSizer(grid_sizer_18);
    grid_sizer_18->Fit(this);
    grid_sizer_18->SetSizeHints(this);
    grid_sizer_18->AddGrowableCol(0);
    // end wxGlade
}

