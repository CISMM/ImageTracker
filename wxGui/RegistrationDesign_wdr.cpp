//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: RegistrationDesign.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "RegistrationDesign_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "RegistrationDesign_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "DoubleSlider.h"
#include "../vtkView/VtkCanvas.h"

// Implement window functions

wxSizer *CreateRegistrationDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Threshold") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxCheckBox *item5 = new wxCheckBox( parent, ID_CHECK_ABOVE, _("Above"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXT_ABOVE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSlider *item7 = new wxSlider( parent, ID_SLIDER_ABOVE, 0, 0, 100, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item7->SetToolTip( _("Remove pixels above a certain value") );
    item7->Enable( false );
    item4->Add( item7, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_CHECK_BELOW, _("Below"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetValue( TRUE );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TEXT_BELOW, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSlider *item10 = new wxSlider( parent, ID_SLIDER_BELOW, 0, 0, 100, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item10->SetToolTip( _("Remove pixels below a certain value") );
    item4->Add( item10, 1, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item12 = new wxStaticBox( parent, -1, _("Smooth") );
    wxStaticBoxSizer *item11 = new wxStaticBoxSizer( item12, wxHORIZONTAL );

    wxFlexGridSizer *item13 = new wxFlexGridSizer( 2, 0, 0 );

    wxCheckBox *item14 = new wxCheckBox( parent, ID_CHECK_SMOOTH, _("Sigma"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->SetValue( TRUE );
    item13->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_TEXT_SMOOTH, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item13->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( 80, 20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    DoubleSlider *item16 = new DoubleSlider( parent, ID_SLIDER_SMOOTH, 0, 0, 100, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item16->SetToolTip( _("Change the degree of smoothing applied") );
    item13->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_CHECK_PREVIEW, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->SetToolTip( _("Preview the affect of prefiltering") );
    item17->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxHORIZONTAL );

    wxFlexGridSizer *item21 = new wxFlexGridSizer( 3, 0, 0 );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_CHECK_TRANSFORM, _("Transforms"), wxDefaultPosition, wxSize(80,-1), 0 );
    item22->SetToolTip( _("Save transform information") );
    item21->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_TEXT_TRANSFORM, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, ID_TRANSFORM_FILE, _("File"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->SetToolTip( _("Select the transform file") );
    item21->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item25 = new wxCheckBox( parent, ID_CHECK_IMAGES, _("Images"), wxDefaultPosition, wxSize(80,-1), 0 );
    item25->SetToolTip( _("Save transformed images") );
    item21->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID_TEXT_OUTDIR, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item21->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID_OUT_DIRECTORY, _("Directory"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->SetToolTip( _("Select the image output directory") );
    item21->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, _("Prefix"), wxDefaultPosition, wxSize(80,-1), 0 );
    item21->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, ID_TEXT_PREFIX, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item29->SetToolTip( _("The prefix to prepend to all image file names") );
    item21->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER, 25 );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item31 = new wxButton( parent, ID_NEXT, _("Next"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->SetToolTip( _("Register one pair of images in the sequence") );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, ID_RUN, _("Run All"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->SetToolTip( _("Register all pairs of images in the sequence") );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item33 = new wxButton( parent, ID_HIDE, _("Hide"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->SetToolTip( _("Hide this dialog") );
    item30->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateFileSetDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxButton *item3 = new wxButton( parent, FSD_ADD, _("Add"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->SetToolTip( _("Add files to the list") );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, FSD_REMOVE, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetToolTip( _("Remove selected files from the list") );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxListBox *item5 = new wxListBox( parent, ID_LIST_FILES, wxDefaultPosition, wxSize(200,300), 0, strs5, wxLB_EXTENDED );
    item1->Add( item5, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Directory"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_TEXT_DIR, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item6->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, FSD_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->SetToolTip( _("Hide this window") );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateLoggerDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, LOG_MESSAGES, wxT(""), wxDefaultPosition, wxSize(600,300), wxTE_MULTILINE|wxTE_READONLY );
    item1->SetToolTip( _("Logger messages") );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item3 = new wxButton( parent, LOG_COPY, _("Copy"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->SetToolTip( _("Copy logger messages to the clipboard") );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, LOG_CLEAR, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetToolTip( _("Clear the logger text") );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( 20, 20, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, LOG_HIDE, _("Hide"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->SetToolTip( _("Hide the logger window") );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateViewerDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    VtkCanvas *item1 = new VtkCanvas( parent, IV_CANVAS, wxDefaultPosition, wxSize(640,480), 0 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateHLTrackerDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Feature Detector") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Max Count"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXT_COUNT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSlider *item7 = new wxSlider( parent, ID_SLIDER_COUNT, 1000, 500, 10000, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item4->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Scale"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TEXT_SCALE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    DoubleSlider *item10 = new DoubleSlider( parent, ID_SLIDER_SCALE, 0, 0, 100, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item4->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item12 = new wxStaticBox( parent, -1, _("Feature Tracker") );
    wxStaticBoxSizer *item11 = new wxStaticBoxSizer( item12, wxHORIZONTAL );

    wxFlexGridSizer *item13 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Max Distance"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_TEXT_DISTANCE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item13->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( 80, 20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSlider *item16 = new wxSlider( parent, ID_SLIDER_DISTANCE, 5, 1, 50, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item13->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_CHECK_PREVIEW, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxHORIZONTAL );

    wxFlexGridSizer *item21 = new wxFlexGridSizer( 3, 0, 0 );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_CHECK_IMAGES, _("Images"), wxDefaultPosition, wxSize(80,-1), 0 );
    item22->SetValue( TRUE );
    item21->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_TEXT_IMAGE_DIR, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, ID_BUTTON_DIRECTORY, _("Directory"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, _("Prefix"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID_TEXT_PREFIX, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item21->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item28 = new wxButton( parent, ID_BUTTON_RUN, _("Run All"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, ID_BUTTON_HIDE, _("Hide"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateImageTrackerApp( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 3, 0, 0 );

    wxPanel *item2 = new wxPanel( parent, ID_PANEL_FILES, wxDefaultPosition, wxSize(200,400), 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxPanel *item3 = new wxPanel( parent, ID_PANEL_IMAGE, wxDefaultPosition, wxSize(400,400), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxPanel *item4 = new wxPanel( parent, ID_PANEL_CONTROL, wxDefaultPosition, wxSize(200,400), 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxPanel *item5 = new wxPanel( parent, ID_PANEL_LOGGER, wxDefaultPosition, wxSize(600,160), 0 );
    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateCLGOpticFlowDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Parameters") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Spatial Sigma"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXT_SIGMA, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    DoubleSlider *item7 = new DoubleSlider( parent, ID_SLIDER_SIGMA, 1, 0, 20, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item4->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Regularization (10^x)"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TEXT_REGULARIZATION, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item4->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 80, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    DoubleSlider *item10 = new DoubleSlider( parent, ID_SLIDER_REGULARIZATION, 0, 0, 100, wxDefaultPosition, wxSize(200,-1), wxSL_HORIZONTAL );
    item4->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Relaxation"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_TEXT_RELAXATION, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 20, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    DoubleSlider *item13 = new DoubleSlider( parent, ID_SLIDER_RELAXATION, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item4->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Iterations"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_TEXT_ITERATIONS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( 20, 20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSlider *item16 = new wxSlider( parent, ID_SLIDER_ITERATIONS, 200, 1, 4000, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item4->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxHORIZONTAL );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 3, 0, 0 );

    wxCheckBox *item20 = new wxCheckBox( parent, ID_CHECK_IMAGES, _("Images"), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->SetValue( TRUE );
    item19->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_TEXT_IMAGE_DIR, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item22 = new wxButton( parent, ID_BUTTON_DIRECTORY, _("Directory"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Prefix"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_TEXT_PREFIX, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item19->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item26 = new wxButton( parent, ID_BUTTON_RUN, _("Run All"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID_BUTTON_HIDE, _("Hide"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *CreateViewerMenu()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( IV_FILES, _("&Open\tCtrl-O"), _("Open image files") );
    item1->AppendSeparator();
    item1->Append( IV_EXIT, _("E&xit"), _("Exit the application") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( IV_REGISTER, _("&Register"), _("Align a sequence of image files") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( IV_TRACK, _("&Track Features"), _("Track features in a sequence of images") );
    item3->Append( IV_CLGOpticFlow, _("&Combined Local Global"), _("Compute optic flow using an iterative local and global algorithm") );
    item2->Append( ID_MENU, _("&Optic Flow"), item3 );

    item0->Append( item2, _("&Actions") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( IV_MENU_LOGGER, _("&Logger"), _("Show the logging window") );
    item0->Append( item4, _("&View") );
    
    wxMenu* item5 = new wxMenu;
    item5->Append( IV_ABOUT, _("A&bout"), _("About this application") );
    item0->Append( item5, _("&Help") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
