// -*- C++ -*- generated by wxGlade 0.6.3 on Fri Jul 25 08:47:59 2008

#include "ImageFileSetPanel.h"

// begin wxGlade: ::extracode

// end wxGlade

#include <string>
#include <vector>

#include "wx/filename.h"

#include "file_list.h"
#include "FilePattern.h"
#include "FileSet.h"
#include "ImageTrackerController.h"
#include "Logger.h"
#include "wxUtils.h"

static const std::string IMAGE_FILE_FILTER(
    "All Files|*.*|TIFF|*.tif;*.tiff|PNG|*.png|JPG|*.jpg|mha|*.mha|vtk|*.vtk");


ImageFileSetPanel::ImageFileSetPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    FilterControlPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: ImageFileSetPanel::ImageFileSetPanel
    sizer_60_staticbox = new wxStaticBox(this, -1, wxT("Image Files"));
    const wxString radioPixelType_choices[] = {
        wxT("Scalar 8-bit"),
        wxT("Scalar 16-bit"),
        wxT("Scalar float")
    };
    radioPixelType = new wxRadioBox(this, RADIO_PIXEL_TYPE, wxT("Pixel Type"), wxDefaultPosition, wxDefaultSize, 3, radioPixelType_choices, 0, wxRA_SPECIFY_ROWS);
    panelFileSet = new FileSetPanel(this, wxID_ANY);
    buttonApply = new wxButton(this, BUTTON_APPLY, wxT("&Apply"));

    set_properties();
    do_layout();
    // end wxGlade
    
    this->panelFileSet->SetFilter(IMAGE_FILE_FILTER);
    this->name = "Image Files";
    this->reader = ImageFileSetReader::New();
}


BEGIN_EVENT_TABLE(ImageFileSetPanel, wxPanel)
    // begin wxGlade: ImageFileSetPanel::event_table
    EVT_RADIOBOX(RADIO_PIXEL_TYPE, ImageFileSetPanel::OnPixelType)
    EVT_BUTTON(BUTTON_APPLY, ImageFileSetPanel::OnApply)
    // end wxGlade
END_EVENT_TABLE();


void ImageFileSetPanel::OnApply(wxCommandEvent &event)
{
    // Ensure there are some files selected
    if (this->panelFileSet->GetCount() < 1)
    {
        wxMessageDialog dlg(this, wxT("Please select at least one image file for this data source."), wxT("No files"), wxOK);
        dlg.ShowModal();
        return;
    }
        
    // Select the data type
    switch (this->radioPixelType->GetSelection())
    {
        case 0:
            this->reader->SetPixelType(CharPixel);
            break;
        case 1:
            this->reader->SetPixelType(ShortPixel);
            break;
        case 2:
            this->reader->SetPixelType(FloatPixel);
            break;
    }
    
    // Set the files in the reader
    this->reader->SetFileSet(this->panelFileSet->GetFileSet());
    
    ImageTrackerController::Instance()->UpdateImageFileSet();
}

void ImageFileSetPanel::OnPixelType(wxCommandEvent& event)
{
//     this->buttonApply->Enable(true);
}

// wxGlade: add ImageFileSetPanel event handlers


void ImageFileSetPanel::set_properties()
{
    // begin wxGlade: ImageFileSetPanel::set_properties
    Hide();
    radioPixelType->SetToolTip(wxT("Select the type of data stored in the images"));
    radioPixelType->SetSelection(1);
    buttonApply->SetToolTip(wxT("Apply changes; this loads the selected files"));
    // end wxGlade
}


void ImageFileSetPanel::do_layout()
{
    // begin wxGlade: ImageFileSetPanel::do_layout
    wxStaticBoxSizer* sizer_60 = new wxStaticBoxSizer(sizer_60_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_66 = new wxBoxSizer(wxHORIZONTAL);
    sizer_60->Add(radioPixelType, 0, wxEXPAND, 0);
    sizer_60->Add(panelFileSet, 1, wxEXPAND, 0);
    sizer_66->Add(buttonApply, 0, 0, 0);
    sizer_60->Add(sizer_66, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetSizer(sizer_60);
    sizer_60->Fit(this);
    // end wxGlade
}

void ImageFileSetPanel::SetInput(const ImageType* input)
{
    // no op
}

ImageFileSetPanel::ImageType* ImageFileSetPanel::GetOutput()
{
    return this->reader->GetOutput();
}

void ImageFileSetPanel::SetImageIndex(unsigned int idx)
{
    this->reader->SetImageIndex(idx);
}

ImageFileSetReader::Pointer ImageFileSetPanel::GetReader()
{
    return this->reader;
}

void ImageFileSetPanel::SetFileSet(const FileSet& files)
{
    // update the image file reader
    this->reader->SetFileSet(files);
    
    // update the file list
    this->panelFileSet->SetFileSet(files);
}

FileSet& ImageFileSetPanel::GetFileSet()
{
    return this->reader->GetFileSet();
}
