// -*- C++ -*- generated by wxGlade 0.6.3 on Thu Jul 31 10:07:27 2008

#include "FileSetPanel.h"

// begin wxGlade: ::extracode

// end wxGlade

#include <vector>

#include "file_list.h"
#include "wxUtils.h"

FileSetPanel::FileSetPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: FileSetPanel::FileSetPanel
    sizerFileList_staticbox = new wxStaticBox(this, -1, wxT("Files"));
    const wxString *listFiles_choices = NULL;
    listFiles = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, listFiles_choices, wxLB_EXTENDED);
    buttonAddExample = new wxButton(this, BUTTON_ADD_EXAMPLE, wxT("&Example"));
    buttonAddSelection = new wxButton(this, BUTTON_ADD_SELECTION, wxT("&Selection"));
    buttonAddPattern = new wxButton(this, BUTTON_ADD_PATTERN, wxT("&Pattern"));
    buttonRemoveSelection = new wxButton(this, BUTTON_REMOVE_SELECTION, wxT("&Remove"));

    set_properties();
    do_layout();
    // end wxGlade
    
    this->filter = "All files|*.*";
    this->dialogFilePattern = new FilePatternDialog(this, -1, wxT("Specify a file naming pattern"));
}


BEGIN_EVENT_TABLE(FileSetPanel, wxPanel)
    // begin wxGlade: FileSetPanel::event_table
    EVT_BUTTON(BUTTON_ADD_EXAMPLE, FileSetPanel::OnAddExample)
    EVT_BUTTON(BUTTON_ADD_SELECTION, FileSetPanel::OnAddSelection)
    EVT_BUTTON(BUTTON_ADD_PATTERN, FileSetPanel::OnAddPattern)
    EVT_BUTTON(BUTTON_REMOVE_SELECTION, FileSetPanel::OnRemoveSelection)
    // end wxGlade
END_EVENT_TABLE();


void FileSetPanel::OnAddExample(wxCommandEvent &event)
{
    wxString defDir = wxFileName::GetCwd();
    
    // choose a single image file
    wxFileDialog open(this, wxT("Choose an example file"), defDir, wxT(""),
        nano::std2wx(this->filter),
        wxOPEN | wxFILE_MUST_EXIST | wxCHANGE_DIR);
    
    if (open.ShowModal() == wxID_OK)
    {
        // Get the selected file name
        wxString file = open.GetPath();
        
        // Find other files in sequence based on example
        typedef std::vector<std::string> StringVector;
        StringVector files;
        file_list(nano::wx2std(file), files);
        
        // Convert list back for wx
        StringVector::iterator it;
        wxArrayString wxFiles;
        wxFiles.Alloc(files.size());
        for (it = files.begin(); it != files.end(); ++it)
        {
            wxFiles.Add(nano::std2wx(*it));
        }
        
        // Add to the list box
        this->listFiles->Append(wxFiles);
    }
}


void FileSetPanel::OnAddSelection(wxCommandEvent &event)
{
    wxString defDir = wxFileName::GetCwd();
    // Select multiple files
    wxFileDialog open(this, wxT("Choose image files"), defDir, wxT(""), 
        nano::std2wx(this->filter), 
        wxOPEN | wxFILE_MUST_EXIST | wxMULTIPLE | wxCHANGE_DIR);
    
    if (open.ShowModal() == wxID_OK)
    {
        // Add files to the list box
        wxArrayString paths;
        open.GetPaths(paths);
        paths.Sort();
        this->listFiles->Append(paths);
    }
}


void FileSetPanel::OnAddPattern(wxCommandEvent &event)
{
    // Show the file pattern dialog
    if (this->dialogFilePattern->ShowModal() == wxID_OK)
    {
        // fill the list box from the data in the pattern dialog
        FileSet fileSet(this->dialogFilePattern->GetFilePattern());
        FileSet::FileVector fileNames = fileSet.GetFileNames();
        wxArrayString wxFiles;
        wxFiles.Alloc(fileNames.size());
        FileSet::FileIterator it;
        for (it = fileNames.begin(); it != fileNames.end(); ++it)
        {
            wxFiles.Add(nano::std2wx(*it));
        }
        
        this->listFiles->Append(wxFiles);
    }
}


void FileSetPanel::OnRemoveSelection(wxCommandEvent &event)
{
    wxArrayInt idxs;
    int count = this->listFiles->GetSelections(idxs);
    if (count > 0)
    {
        // Remove all elements in reverse order to preserve indices
        for (int i = count-1; i >= 0; i--)
        {
            this->listFiles->Delete(idxs[i]);
        }
    }
}


// wxGlade: add FileSetPanel event handlers


void FileSetPanel::set_properties()
{
    // begin wxGlade: FileSetPanel::set_properties
    listFiles->SetToolTip(wxT("Specify the image files to load into ImageTracker using the buttons below"));
    buttonAddExample->SetToolTip(wxT("Select a single file and have ImageTracker find other files with the same naming convention"));
    buttonAddSelection->SetToolTip(wxT("Select a group of files to load"));
    buttonAddPattern->SetToolTip(wxT("(Seldom used) Manually specify an image file pattern"));
    buttonRemoveSelection->SetToolTip(wxT("Remove the selected files from the list"));
    // end wxGlade
}


void FileSetPanel::do_layout()
{
    // begin wxGlade: FileSetPanel::do_layout
    wxStaticBoxSizer* sizerFileList = new wxStaticBoxSizer(sizerFileList_staticbox, wxVERTICAL);
    wxBoxSizer* sizerButtons = new wxBoxSizer(wxHORIZONTAL);
    sizerFileList->Add(listFiles, 2, wxEXPAND, 0);
    sizerButtons->Add(buttonAddExample, 0, 0, 0);
    sizerButtons->Add(buttonAddSelection, 0, 0, 0);
    sizerButtons->Add(buttonAddPattern, 0, 0, 0);
    sizerButtons->Add(buttonRemoveSelection, 0, 0, 0);
    sizerFileList->Add(sizerButtons, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetSizer(sizerFileList);
    sizerFileList->Fit(this);
    // end wxGlade
}

void FileSetPanel::SetFilter(const std::string& filter)
{
    this->filter = filter;
}

void FileSetPanel::SetFileSet(const FileSet& files)
{
    this->files = files;
    
    // Update the file list
    FileSet::FileVector fileNames = files.GetFileNames();
    wxArrayString wxFiles;
    wxFiles.Alloc(files.size());
    FileSet::FileIterator it;
    for (it = fileNames.begin(); it != fileNames.end(); ++it)
    {
        wxFiles.Add(nano::std2wx(*it));
    }
    
    this->listFiles->Set(wxFiles);
}

FileSet& FileSetPanel::GetFileSet()
{
    this->files = FileSet();
    for (unsigned int i = 0; i < this->listFiles->GetCount(); i++)
    {
        this->files.Add(nano::wx2std(this->listFiles->GetString(i)));
    }
    return this->files;
}

int FileSetPanel::GetCount()
{
    return this->listFiles->GetCount();
}
