// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Jul 29 11:45:14 2008

#include "MultiResolutionRegistrationDialog.h"

// begin wxGlade: ::extracode

// end wxGlade

#include "FileSet.h"
#include "FileUtils.h"
#include "ImageTrackerController.h"
#include "Logger.h"
#include "PipelineExecutor.h"
#include "wxUtils.h"

MultiResolutionRegistrationDialog::MultiResolutionRegistrationDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME)
{
    // begin wxGlade: MultiResolutionRegistrationDialog::MultiResolutionRegistrationDialog
    sizer_23_staticbox = new wxStaticBox(this, -1, wxT("Optimization"));
    sizer_17_staticbox = new wxStaticBox(this, -1, wxT("Output"));
    sizer_20_staticbox = new wxStaticBox(this, -1, wxT("Smoothing"));
    label_8 = new wxStaticText(this, wxID_ANY, wxT("Maximum Smoothing"));
    slideMaxSmooth = new wxIntSlider(this, SLIDE_MAX_SMOOTH);
    label_9 = new wxStaticText(this, wxID_ANY, wxT("Minimum Smoothing"));
    slideMinSmooth = new wxIntSlider(this, SLIDE_MIN_SMOOTH);
    label_21 = new wxStaticText(this, wxID_ANY, wxT("Iterations"));
    slideIterations = new wxIntSlider(this, wxID_ANY);
    label_22 = new wxStaticText(this, wxID_ANY, wxT("Initial Maximum\nStep Length"));
    slideMaxStepLength = new wxDoubleSlider(this, wxID_ANY);
    label_23 = new wxStaticText(this, wxID_ANY, wxT("Initial Minimum\nStep Length"));
    slideMinStepLength = new wxDoubleSlider(this, wxID_ANY);
    label_24 = new wxStaticText(this, wxID_ANY, wxT("Inter-level\nStep Scale"));
    slideStepScale = new wxDoubleSlider(this, wxID_ANY);
    panelFilePattern = new FilePatternPanel(this, wxID_ANY);
    label_6 = new wxStaticText(this, wxID_ANY, wxT("Transform File"));
    textTransform = new wxTextCtrl(this, wxID_ANY, wxT("transforms.txt"));
    checkOpenOutput = new wxCheckBox(this, wxID_ANY, wxT("Open output when finished"));
    buttonRun = new wxButton(this, wxID_OK, wxT("&Run"));
    buttonHide = new wxButton(this, wxID_CANCEL, wxT("&Hide"));

    set_properties();
    do_layout();
    // end wxGlade
    
    //-- Custom code --//
    // setup process objects
    this->preview = false;
    this->input = NULL;
    this->pipeline = MultiResolutionRegistrationPipeline::New();
    this->visual = ScalarImageVisualization::New();
    
    // setup sliders
    this->slideMaxSmooth->SetRange(1, 24);
    this->slideMinSmooth->SetRange(1, 24);
    this->slideMaxSmooth->SetValue(8);
    this->slideMinSmooth->SetValue(2);
    
    this->slideIterations->SetRange(50, 1000);
    this->slideIterations->SetValue(200);
    this->slideMaxStepLength->SetRange(0.1, 25.0, 0.1);
    this->slideMaxStepLength->SetValue(5.0);
    this->slideMaxStepLength->SetFormat("%0.02f");
    this->slideMinStepLength->SetRange(0.05, 25.0, 0.05);
    this->slideMinStepLength->SetValue(0.5);
    this->slideMinStepLength->SetFormat("%0.02f");
    this->slideStepScale->SetRange(1.0, 20.0, 0.5);
    this->slideStepScale->SetValue(10.0);
    this->slideStepScale->SetFormat("%0.1f");

    this->panelFilePattern->SetRangeEnabled(false);
}


BEGIN_EVENT_TABLE(MultiResolutionRegistrationDialog, wxDialog)
    EVT_SLIDER(SLIDE_MAX_SMOOTH, MultiResolutionRegistrationDialog::OnMaxSmooth)
    EVT_SLIDER(SLIDE_MIN_SMOOTH, MultiResolutionRegistrationDialog::OnMinSmooth)
    // begin wxGlade: MultiResolutionRegistrationDialog::event_table
    EVT_BUTTON(wxID_OK, MultiResolutionRegistrationDialog::OnRun)
    EVT_BUTTON(wxID_CANCEL, MultiResolutionRegistrationDialog::OnHide)
    // end wxGlade
END_EVENT_TABLE();


void MultiResolutionRegistrationDialog::OnMaxSmooth(wxCommandEvent &event)
{
    this->pipeline->SetPreviewShrinkFactor((unsigned int) this->slideMaxSmooth->GetValue());
    this->UpdatePreview();
}

void MultiResolutionRegistrationDialog::OnMinSmooth(wxCommandEvent &event)
{
    this->pipeline->SetPreviewShrinkFactor((unsigned int) this->slideMinSmooth->GetValue());
    this->UpdatePreview();
}

void MultiResolutionRegistrationDialog::OnRun(wxCommandEvent &event)
{
    event.Skip();
}


void MultiResolutionRegistrationDialog::OnHide(wxCommandEvent &event)
{
    this->ViewPreview(false);
    event.Skip();
}


// wxGlade: add MultiResolutionRegistrationDialog event handlers


void MultiResolutionRegistrationDialog::set_properties()
{
    // begin wxGlade: MultiResolutionRegistrationDialog::set_properties
    SetTitle(wxT("MultiResolution Registration"));
    label_8->SetMinSize(wxSize(140, 17));
    slideMaxSmooth->SetToolTip(wxT("The coarsest resolution at which to align images"));
    slideMinSmooth->SetToolTip(wxT("The finest resolution at which to align images"));
    slideIterations->SetToolTip(wxT("The number of optimization iterations to apply at each resolution"));
    slideMaxStepLength->SetToolTip(wxT("The maximum step size at the coarsest resolution level"));
    slideMinStepLength->SetToolTip(wxT("The minimum step size at the coarsest resolution"));
    slideStepScale->SetToolTip(wxT("Scale factor by which to reduce the max and min step size at each resolution level"));
    checkOpenOutput->SetValue(1);
    buttonRun->SetToolTip(wxT("Run this task"));
    buttonHide->SetToolTip(wxT("Close this dialog"));
    // end wxGlade
}


void MultiResolutionRegistrationDialog::do_layout()
{
    // begin wxGlade: MultiResolutionRegistrationDialog::do_layout
    wxBoxSizer* sizer_16 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_19 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_17 = new wxStaticBoxSizer(sizer_17_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_4 = new wxFlexGridSizer(2, 2, 5, 5);
    wxStaticBoxSizer* sizer_23 = new wxStaticBoxSizer(sizer_23_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_6 = new wxFlexGridSizer(4, 2, 5, 0);
    wxStaticBoxSizer* sizer_20 = new wxStaticBoxSizer(sizer_20_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(2, 2, 5, 0);
    grid_sizer_1->Add(label_8, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_1->Add(slideMaxSmooth, 1, wxEXPAND, 0);
    grid_sizer_1->Add(label_9, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_1->Add(slideMinSmooth, 1, wxEXPAND, 0);
    grid_sizer_1->AddGrowableCol(1);
    sizer_20->Add(grid_sizer_1, 1, wxEXPAND, 0);
    sizer_16->Add(sizer_20, 0, wxALL|wxEXPAND, 2);
    grid_sizer_6->Add(label_21, 0, 0, 0);
    grid_sizer_6->Add(slideIterations, 1, wxEXPAND, 0);
    grid_sizer_6->Add(label_22, 0, 0, 0);
    grid_sizer_6->Add(slideMaxStepLength, 1, wxEXPAND, 0);
    grid_sizer_6->Add(label_23, 0, 0, 0);
    grid_sizer_6->Add(slideMinStepLength, 1, wxEXPAND, 0);
    grid_sizer_6->Add(label_24, 0, 0, 0);
    grid_sizer_6->Add(slideStepScale, 1, wxEXPAND, 0);
    grid_sizer_6->AddGrowableCol(1);
    sizer_23->Add(grid_sizer_6, 1, wxEXPAND, 0);
    sizer_16->Add(sizer_23, 0, wxALL|wxEXPAND, 2);
    sizer_17->Add(panelFilePattern, 0, wxBOTTOM|wxEXPAND, 10);
    grid_sizer_4->Add(label_6, 0, 0, 0);
    grid_sizer_4->Add(textTransform, 0, wxEXPAND, 0);
    grid_sizer_4->Add(20, 20, 0, 0, 0);
    grid_sizer_4->Add(checkOpenOutput, 0, 0, 0);
    grid_sizer_4->AddGrowableCol(1);
    sizer_17->Add(grid_sizer_4, 0, wxEXPAND, 0);
    sizer_16->Add(sizer_17, 0, wxEXPAND, 0);
    sizer_19->Add(buttonRun, 0, 0, 0);
    sizer_19->Add(buttonHide, 0, 0, 0);
    sizer_16->Add(sizer_19, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetSizer(sizer_16);
    sizer_16->Fit(this);
    Layout();
    // end wxGlade
}

bool MultiResolutionRegistrationDialog::TransferDataToWindow()
{
    this->slideIterations->SetValue(this->pipeline->GetOptimizerNumberOfIterations());
    this->slideMaxStepLength->SetValue(this->pipeline->GetOptimizerInitialMaximumStepLength());
    this->slideMinStepLength->SetValue(this->pipeline->GetOptimizerInitialMinimumStepLength());
    this->slideStepScale->SetValue(this->pipeline->GetOptimizerStepLengthScale());
    
    // create a default output file pattern
    std::string dir(nano::wx2std(wxGetCwd()));
    CapDirectory(dir);
    std::string format("reg-%04d.tif");
    std::string example = ImageTrackerController::Instance()->GetImageFiles()[0];    
    unsigned int start = NumberPart(example);
    unsigned int end = start + this->input->GetImageCount() - 1;
    this->panelFilePattern->SetFilePattern(FilePattern(dir, format, start, end));
    this->panelFilePattern->TransferDataToWindow();

    // Turn on preview
    this->ViewPreview(true);
    
    return true;
}

bool MultiResolutionRegistrationDialog::TransferDataFromWindow()
{
    std::string function("MultiResolutionRegistrationDialog::TransferDataFromWindow");

    // configure pipeline
    this->pipeline->SetShrinkFactors(this->slideMinSmooth->GetValue(), this->slideMaxSmooth->GetValue());
    
    this->pipeline->SetOptimizerNumberOfIterations(this->slideIterations->GetValue());
    this->pipeline->SetOptimizerInitialMaximumStepLength(this->slideMaxStepLength->GetValue());
    this->pipeline->SetOptimizerInitialMinimumStepLength(this->slideMinStepLength->GetValue());
    this->pipeline->SetOptimizerStepLengthScale(this->slideStepScale->GetValue());
    
    // Create an output file set
    FileSet outFiles(this->panelFilePattern->GetFilePattern());

    this->pipeline->SetOutputFiles(outFiles);
    this->pipeline->SetTransformFile(
        this->panelFilePattern->GetFilePattern().directory +
        nano::wx2std(this->textTransform->GetValue()));
    
    Logger::verbose << function << ": Creating executor thread" << std::endl;
    PipelineExecutor* exec = new PipelineExecutor(this->pipeline);
    exec->SetOpenFiles(this->checkOpenOutput->IsChecked());
    if (exec->Create() == wxTHREAD_NO_ERROR)
    {
        Logger::verbose << function << ": Running exectutor thread" << std::endl;
        exec->Run();
        Logger::verbose << function << ": Return from PipelineExecutor::Run()" << std::endl;
    }
    else
    {
        Logger::warning << function << ": Thread was not created; pipeline not executed." << std::endl;
    }

    // turn off preview
    this->ViewPreview(false);
    return true;
}

void MultiResolutionRegistrationDialog::SetInput(ImageFileSet* input)
{
    this->input = input;
    this->pipeline->SetInput(this->input);
}

void MultiResolutionRegistrationDialog::ViewPreview(bool show)
{
    if (this->input &&
        this->input->GetImageCount() > 0)
    {
        if (show)
        {
            this->visual->SetInput(this->pipeline->GetPreviewImage());
            this->visual->AddPropsTo(ImageTrackerController::Instance()->GetRenderer());
            this->preview = true;
            this->UpdatePreview();
        }
        else
        {
            this->visual->RemovePropsFrom(ImageTrackerController::Instance()->GetRenderer());
            this->UpdatePreview();
            this->preview = false;
        }
    }
}

void MultiResolutionRegistrationDialog::UpdatePreview()
{
    if (this->preview)
    {
        this->visual->Update();
        ImageTrackerController::Instance()->Render();
    }
}
