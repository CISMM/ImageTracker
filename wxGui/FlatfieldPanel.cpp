// -*- C++ -*- generated by wxGlade 0.6.3 on Wed Aug 13 17:29:24 2008

#include "FlatfieldPanel.h"

// begin wxGlade: ::extracode

// end wxGlade

#include "ImageFileSetTypes.h"
#include "ImageUtils.h"
#include "wxUtils.h"

FlatfieldPanel::FlatfieldPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    FilterControlPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: FlatfieldPanel::FlatfieldPanel
    sizer_70_staticbox = new wxStaticBox(this, -1, wxT("Flatfield"));
    checkFlatImage = new wxCheckBox(this, CHECK_FLAT_IMAGE, wxT("Flat Image"));
    buttonBrowseFlat = new wxButton(this, BUTTON_BROWSE_FLAT, wxT("Browse"));
    textFlatImage = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    checkBackgroundImage = new wxCheckBox(this, CHECK_BACKGROUND_IMAGE, wxT("Background Image"));
    buttonBrowseBackground = new wxButton(this, BUTTON_BROWSE_BACKGROUND, wxT("Browse"));
    textBackgroundImage = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    text_ctrl_5 = new wxTextCtrl(this, wxID_ANY, wxT("Given an input image (I) and flatfield and background images (F, B), the output generated by this filter is as follows:\nO = (I - B)\n       -------\n           F"), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);

    set_properties();
    do_layout();
    // end wxGlade
    
    this->name = "Flatfield";
    
    // setup pipeline
    this->subtract = SubtractType::New();
    this->divide = DivideType::New();
    
    this->divide->SetInput1(subtract->GetOutput());
}


BEGIN_EVENT_TABLE(FlatfieldPanel, wxPanel)
    // begin wxGlade: FlatfieldPanel::event_table
    EVT_CHECKBOX(CHECK_FLAT_IMAGE, FlatfieldPanel::OnFlatImage)
    EVT_BUTTON(BUTTON_BROWSE_FLAT, FlatfieldPanel::OnBrowseFlat)
    EVT_CHECKBOX(CHECK_BACKGROUND_IMAGE, FlatfieldPanel::OnBackgroundImage)
    EVT_BUTTON(BUTTON_BROWSE_BACKGROUND, FlatfieldPanel::OnBrowseBackground)
    // end wxGlade
END_EVENT_TABLE();


void FlatfieldPanel::OnFlatImage(wxCommandEvent &event)
{
    // enable/disable browse button
    this->buttonBrowseFlat->Enable(this->checkFlatImage->IsChecked());
    
    // prompt for image file if one is not specified yet
    if (this->checkFlatImage->IsChecked() &&
        this->textFlatImage->GetValue() == wxT(""))
    {
        this->OnBrowseFlat(event);
    }
    else if (this->checkFlatImage->IsChecked())
    {
        // load flatfield image file, specified by name
        this->divide->SetInput2(ReadImage<ImageTypeF2>(nano::wx2std(this->textFlatImage->GetValue())));
    }
    else
    {
        // create an identity flatfield image
        this->divide->SetInput2(this->MakeDivideImage());
    }
}


void FlatfieldPanel::OnBrowseFlat(wxCommandEvent &event)
{
    
    // Pop up a dialog for image file selection
    wxFileDialog dlgFile(this, 
        wxT("Choose an image file"), wxT(""), wxT(""), wxT("*.*"),
        wxFD_OPEN|wxFD_FILE_MUST_EXIST|wxFD_CHANGE_DIR);
    if (dlgFile.ShowModal() == wxID_OK)
    {
        this->textFlatImage->SetValue(dlgFile.GetPath());
        this->divide->SetInput2(ReadImage<ImageTypeF2>(nano::wx2std(this->textFlatImage->GetValue())));
    }
}


void FlatfieldPanel::OnBackgroundImage(wxCommandEvent &event)
{
    // enable/disable browse button
    this->buttonBrowseBackground->Enable(this->checkBackgroundImage->IsChecked());
    
    // prompt for image file if one is not specified yet
    if (this->checkBackgroundImage->IsChecked() &&
        this->textBackgroundImage->GetValue() == wxT(""))
    {
        this->OnBrowseBackground(event);
    }
    else if (this->checkBackgroundImage->IsChecked())
    {
        // load subtract image file, specified by name
        this->subtract->SetInput2(ReadImage<ImageTypeF2>(nano::wx2std(this->textBackgroundImage->GetValue())));
    }
    else
    {
        // create an identity subtract image
        this->subtract->SetInput2(this->MakeSubtractImage());
    }    
}


void FlatfieldPanel::OnBrowseBackground(wxCommandEvent &event)
{
    // Pop up a dialog for image file selection
    wxFileDialog dlgFile(this, 
        wxT("Choose an image file"), wxT(""), wxT(""), wxT("*.*"),
        wxFD_OPEN|wxFD_FILE_MUST_EXIST|wxFD_CHANGE_DIR);
    if (dlgFile.ShowModal() == wxID_OK)
    {
        this->textBackgroundImage->SetValue(dlgFile.GetPath());
        this->subtract->SetInput2(ReadImage<ImageTypeF2>(nano::wx2std(this->textBackgroundImage->GetValue())));
    }
}


// wxGlade: add FlatfieldPanel event handlers


void FlatfieldPanel::set_properties()
{
    // begin wxGlade: FlatfieldPanel::set_properties
    buttonBrowseFlat->Enable(false);
    buttonBrowseBackground->Enable(false);
    text_ctrl_5->Enable(false);
    // end wxGlade
}


void FlatfieldPanel::do_layout()
{
    // begin wxGlade: FlatfieldPanel::do_layout
    wxStaticBoxSizer* sizer_70 = new wxStaticBoxSizer(sizer_70_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_23 = new wxFlexGridSizer(4, 2, 5, 5);
    grid_sizer_23->Add(checkFlatImage, 0, 0, 0);
    grid_sizer_23->Add(buttonBrowseFlat, 0, 0, 0);
    grid_sizer_23->Add(textFlatImage, 0, wxEXPAND, 0);
    grid_sizer_23->Add(20, 20, 0, 0, 0);
    grid_sizer_23->Add(checkBackgroundImage, 0, 0, 0);
    grid_sizer_23->Add(buttonBrowseBackground, 0, 0, 0);
    grid_sizer_23->Add(textBackgroundImage, 0, wxEXPAND, 0);
    grid_sizer_23->Add(20, 20, 0, 0, 0);
    grid_sizer_23->AddGrowableCol(0);
    sizer_70->Add(grid_sizer_23, 1, wxEXPAND, 0);
    sizer_70->Add(text_ctrl_5, 0, wxEXPAND, 0);
    SetSizer(sizer_70);
    sizer_70->Fit(this);
    // end wxGlade
}

void FlatfieldPanel::SetInput(const ImageType* input)
{
    this->subtract->SetInput1(input);
    this->subtract->SetInput2(this->MakeSubtractImage());
    this->divide->SetInput2(this->MakeDivideImage());
}

FlatfieldPanel::ImageType* FlatfieldPanel::GetOutput()
{
    return this->divide->GetOutput();
}

FlatfieldPanel::ImageType::Pointer FlatfieldPanel::MakeSubtractImage()
{
    ImageType::RegionType region;
    ImageType::PointType origin;
    ImageType::SpacingType spacing;
    ImageType::Pointer image = ImageType::New();
    
    // make an image of all zeros
    if (this->subtract->GetInput(0))
    {
        ImageType::ConstPointer input = this->subtract->GetInput(0);
        image->SetRegions(input->GetLargestPossibleRegion());
        image->SetOrigin(input->GetOrigin());
        image->SetSpacing(input->GetSpacing());
        image->Allocate();
        image->FillBuffer((ImageType::PixelType) 0);
    }
    
    PrintImageInfo<ImageType>(image, "Subtract image");
    return image;
}

FlatfieldPanel::ImageType::Pointer FlatfieldPanel::MakeDivideImage()
{
    ImageType::RegionType region;
    ImageType::PointType origin;
    ImageType::SpacingType spacing;
    ImageType::Pointer image = ImageType::New();
    
    // make an image of all zeros
    if (this->subtract->GetInput(0))
    {
        ImageType::ConstPointer input = this->subtract->GetInput(0);
        image->SetRegions(input->GetLargestPossibleRegion());
        image->SetOrigin(input->GetOrigin());
        image->SetSpacing(input->GetSpacing());
        image->Allocate();
        image->FillBuffer((ImageType::PixelType) 1);
    }
    
    PrintImageInfo<ImageType>(image, "Divide image");
    return image;    
}
