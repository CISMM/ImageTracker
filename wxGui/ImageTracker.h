// -*- C++ -*- generated by wxGlade 0.6.3 on Fri Jul 25 12:17:19 2008

#include <wx/wx.h>
#include <wx/image.h>

#ifndef IMAGETRACKER_H
#define IMAGETRACKER_H

// begin wxGlade: ::dependencies
#include <wx/splitter.h>
#include <wx/notebook.h>
// end wxGlade

// begin wxGlade: ::extracode
#include "wxIntSlider.h"
#include "wxVTKRenderWindowInteractor.h"
#include "FileSetPanel.h"

// end wxGlade

#include <fstream>

#include "AboutDialog.h"
#include "ApplyTransformDialog.h"
#include "CLGOpticalFlowDialog.h"
#include "HornOpticalFlowDialog.h"
#include "IntegrateFlowDialog.h"
#include "LoggerDialog.h"
#include "MultiResolutionRegistrationDialog.h"
#include "RemoveOcclusionsDialog.h"
#include "SaveVisualizationDialog.h"
#include "ScalarImageControlDialog.h"

class ImageTracker: public wxFrame {
public:
    // begin wxGlade: ImageTracker::ids
    enum {
        MENU_SAVE_IMAGES = wxID_HIGHEST + 1015,
        MENU_EXIT = wxID_HIGHEST + 1016,
        MENU_THRESHOLD = wxID_HIGHEST + 1017,
        MENU_GAUSSIAN = wxID_HIGHEST + 1018,
        MENU_OCCLUSIONS = wxID_HIGHEST + 1019,
        MENU_STABILIZE = wxID_HIGHEST + 1020,
        MENU_APPLY_TRANSFORM = wxID_HIGHEST + 1021,
        MENU_CLG_OPTICAL_FLOW = wxID_HIGHEST + 1022,
        MENU_INTEGRATE_FLOW = wxID_HIGHEST + 1023,
        MENU_HORN_OPTICAL_FLOW = wxID_HIGHEST + 1024,
        MENU_WINDOW_CONTRAST = wxID_HIGHEST + 1025,
        MENU_LOGGER = wxID_HIGHEST + 1026,
        MENU_IMAGE_INFO = wxID_HIGHEST + 1027,
        MENU_LOOP_PLAY = wxID_HIGHEST + 1028,
        MENU_ABOUT = wxID_HIGHEST + 1029,
        LIST_FILTERS = wxID_HIGHEST + 1045,
        BUTTON_REMOVE_FILTER = wxID_HIGHEST + 1047,
        BUTTON_CLEAR_FILTERS = wxID_HIGHEST + 1049,
        BUTTON_APPLY_VECTOR = wxID_HIGHEST + 1051,
        COMBO_VECTOR_METHOD = wxID_HIGHEST + 1053,
        SLIDE_IMAGE_INDEX = wxID_HIGHEST + 1055,
        BUTTON_FIRST = wxID_HIGHEST + 1056,
        BUTTON_PREVIOUS = wxID_HIGHEST + 1058,
        BUTTON_REWIND = wxID_HIGHEST + 1060,
        BUTTON_PAUSE = wxID_HIGHEST + 1062,
        BUTTON_PLAY = wxID_HIGHEST + 1064,
        BUTTON_NEXT = wxID_HIGHEST + 1066,
        BUTTON_LAST = wxID_HIGHEST + 1068
    };
    // end wxGlade

    ImageTracker(wxWindow* parent, int id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE);

    virtual ~ImageTracker();
    
    // Possible playing states (controls a state machine)
    enum PlayState
    {
        Pause = 0,
        Play,
        Rewind,
        StepForward,
        StepBackward,
        SkipFirst,
        SkipLast,
        AboutToRecord,
        Record
    };
    
    /**
     * We override Destroy() to make sure resources are cleaned up in
     * the proper order.
     */
    virtual bool Destroy();
    
    PlayState GetPlayState() { return this->playState; }
    void SetPlayState(PlayState state) { this->playState = state; }
    
private:
    // begin wxGlade: ImageTracker::methods
    void set_properties();
    void do_layout();
    // end wxGlade

    PlayState playState;
    bool loopPlay;
    
protected:
    // begin wxGlade: ImageTracker::attributes
    wxStaticBox* sizer_41_staticbox;
    wxMenuBar* itMenuBar;
    wxStatusBar* theStatusBar;
    wxListBox* listFilters;
    wxButton* buttonRemoveFilter;
    wxButton* buttonClearFilters;
    wxPanel* panelFilterControl;
    wxPanel* notebook_1_pane_1;
    FileSetPanel* panelVectorFiles;
    wxButton* buttonApplyVector;
    wxStaticText* label_10;
    wxComboBox* comboVectorMethod;
    wxPanel* panelVectorControl;
    wxPanel* notebook_1_pane_2;
    wxNotebook* notebookData;
    wxPanel* panelLeft;
    wxVTKRenderWindowInteractor* rwiView;
    wxIntSlider* slideImageIndex;
    wxButton* buttonFirst;
    wxButton* buttonPrevious;
    wxButton* buttonRewind;
    wxButton* buttonPause;
    wxButton* buttonPlay;
    wxButton* buttonNext;
    wxButton* buttonLast;
    wxPanel* panelRight;
    wxSplitterWindow* vsplitDataView;
    wxPanel* panelMainUpper;
    // end wxGlade

    DECLARE_EVENT_TABLE();

    /**
     * Updates the set of image filters displayed in the filter display list
     * based on the current ImageTrackerController state.  Also updates the
     * image index slider appropriately.
     */
    void UpdateFilterList();
    /**
     * Updates the currently displayed image index based on the ImageTracker
     * PlayState state machine.
     */
    void UpdatePlayState();
    
    std::ofstream* logfile;
    
    AboutDialog* dlgAbout;
    SaveVisualizationDialog* dlgSaveVisualization;
    LoggerDialog* dlgLogger;
    ScalarImageControlDialog* dlgScalarImageControl;
    
    ApplyTransformDialog* dlgApplyTransform;
    MultiResolutionRegistrationDialog* dlgRegistration;
    RemoveOcclusionsDialog* dlgRemoveOcclusions;
    CLGOpticalFlowDialog* dlgCLGOpticalFlow;
    HornOpticalFlowDialog* dlgHornOpticalFlow;
    IntegrateFlowDialog* dlgIntegrateFlow;
    
    std::string saveFormat;
    unsigned int saveFromIdx;
    unsigned int saveToIdx;
    
public:
    virtual void OnIdle(wxIdleEvent &event);
    virtual void OnImageIndex(wxCommandEvent &event);
    virtual void OnOpen(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnSaveViewImages(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnExit(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnOcclusions(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnStabilize(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnApplyTransform(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnCLGOpticalFlow(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnHornOpticalFlow(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnIntegrateFlow(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnImageInfo(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnAbout(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnSelectFilter(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnClearFilters(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnFirstFrame(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnPrevious(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnRewind(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnPause(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnPlay(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnNext(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnLastFrame(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnThreshold(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnApplyVector(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnVectorMethod(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnLogger(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnLoopPlay(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnGaussian(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnWindowContrast(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void OnRemoveFilter(wxCommandEvent &event); // wxGlade: <event_handler>
}; // wxGlade: end class

class ITApp : public wxApp
{
    public:
        virtual bool OnInit();
};

DECLARE_APP(ITApp)

#endif // IMAGETRACKER_H
