// -*- C++ -*- generated by wxGlade 0.4.1 on Fri Feb  9 12:45:04 2007

#include "ApplyTransformDialog.h"
#include "FileUtils.h"
#include "Logger.h"
#include "PipelineExecutor.h"
#include "wxUtils.h"

bool ApplyTransformDialog::TransferDataToWindow()
{
    // create an output file pattern from the input files
    std::string dir(this->input->GetFiles().GetDirectory());
    std::string format("trans-%04d.tif");
    unsigned int start = NumberPart(this->input->GetFiles()[0]);
    unsigned int end = start + this->input->size() - 1;
    this->panelFilePattern->SetFilePattern(FilePattern(dir, format, start, end));

    this->textTransform->SetValue(std2wx(dir + "transforms.txt"));
    
    this->panelFilePattern->TransferDataToWindow();
    
    return true;
}

bool ApplyTransformDialog::TransferDataFromWindow()
{
    std::string function("ApplyTransformDialog::TransferDataFromWindow");
    Logger::verbose << function << ": entering" << std::endl;
    
    // Set up pipeline paramters
    this->pipeline->SetInput(this->input->GetImages());
    this->pipeline->SetTransformFile(wx2std(this->textTransform->GetValue()));
    
    // Create an output file set
    FileSet outFiles(this->panelFilePattern->GetFilePattern());
    this->pipeline->SetOutputFiles(outFiles);
    
    // Create and launch a pipeline executor (uses another thread)
    PipelineExecutor* exec = new PipelineExecutor(this->pipeline);
    exec->SetOpenFiles(this->checkOpenOutput->IsChecked());
    if (exec->Create() == wxTHREAD_NO_ERROR)
    {
        exec->Run();
    }
    else
    {
        Logger::warning << function << ": Unable able to create threaded pipeline execution object" << std::endl;
        delete exec;
    }
    
    this->Show(false);
    return true;
}

void ApplyTransformDialog::SetInput(DataSource::Pointer input)
{
    this->input = input;
}

ApplyTransformDialog::ApplyTransformDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME)
{
    // begin wxGlade: ApplyTransformDialog::ApplyTransformDialog
    sizer_21_staticbox = new wxStaticBox(this, -1, wxT("Output"));
    sizer_30_staticbox = new wxStaticBox(this, -1, wxT("Parameters"));
    label_25 = new wxStaticText(this, -1, wxT("Transform File"));
    textTransform = new wxTextCtrl(this, -1, wxT("transforms.txt"));
    btnBrowse = new wxButton(this, BTN_BROWSE_TRANSFORM, wxT("Browse..."));
    panelFilePattern = new FilePatternPanel(this, -1);
    checkOpenOutput = new wxCheckBox(this, -1, wxT("Open output when finished"));
    btnRun = new wxButton(this, wxID_OK, wxT("&Run"));
    btnHide = new wxButton(this, wxID_CANCEL, wxT("&Hide"));

    set_properties();
    do_layout();
    // end wxGlade
    
    //----- Custom code -----//
    this->pipeline = ApplyTransformsPipeline::New();
    this->panelFilePattern->SetRangeEnabled(false);
}

BEGIN_EVENT_TABLE(ApplyTransformDialog, wxDialog)
    // begin wxGlade: ApplyTransformDialog::event_table
    EVT_BUTTON(BTN_BROWSE_TRANSFORM, ApplyTransformDialog::OnBrowseTransform)
    // end wxGlade
END_EVENT_TABLE();

void ApplyTransformDialog::OnBrowseTransform(wxCommandEvent &event)
{
    wxFileDialog open(this, wxT("Choose a transform file"), wxT(""), wxT(""), wxT("All Files|*.*|Text Files|*.txt"));
    if (open.ShowModal() == wxID_OK)
    {
        this->textTransform->SetValue(open.GetFilename());
    }
}

// wxGlade: add ApplyTransformDialog event handlers

void ApplyTransformDialog::set_properties()
{
    // begin wxGlade: ApplyTransformDialog::set_properties
    SetTitle(wxT("Apply Transform"));
    SetSize(wxSize(550, 360));
    textTransform->SetToolTip(wxT("A transform file from an image stabilization operation"));
    btnBrowse->SetToolTip(wxT("Find a transform file"));
    checkOpenOutput->SetValue(1);
    btnRun->SetToolTip(wxT("Run this task"));
    btnRun->SetDefault();
    btnHide->SetToolTip(wxT("Close this dialog"));
    // end wxGlade
}

void ApplyTransformDialog::do_layout()
{
    // begin wxGlade: ApplyTransformDialog::do_layout
    wxBoxSizer* sizer_28 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_29 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_21 = new wxStaticBoxSizer(sizer_21_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_10 = new wxFlexGridSizer(1, 2, 5, 5);
    wxStaticBoxSizer* sizer_30 = new wxStaticBoxSizer(sizer_30_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_9 = new wxFlexGridSizer(1, 3, 5, 0);
    grid_sizer_9->Add(label_25, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_9->Add(textTransform, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_9->Add(btnBrowse, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_9->AddGrowableCol(1);
    sizer_30->Add(grid_sizer_9, 1, wxEXPAND, 0);
    sizer_28->Add(sizer_30, 0, wxEXPAND, 0);
    sizer_21->Add(panelFilePattern, 0, wxBOTTOM|wxEXPAND, 10);
    grid_sizer_10->Add(110, 20, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_10->Add(checkOpenOutput, 0, wxADJUST_MINSIZE, 0);
    sizer_21->Add(grid_sizer_10, 1, wxEXPAND, 0);
    sizer_28->Add(sizer_21, 1, wxEXPAND, 0);
    sizer_29->Add(btnRun, 0, wxADJUST_MINSIZE, 0);
    sizer_29->Add(btnHide, 0, wxADJUST_MINSIZE, 0);
    sizer_28->Add(sizer_29, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetAutoLayout(true);
    SetSizer(sizer_28);
    Layout();
    // end wxGlade
}

