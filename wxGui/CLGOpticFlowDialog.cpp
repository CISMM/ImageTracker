// -*- C++ -*- generated by wxGlade 0.4.1 on Tue Feb  6 01:59:37 2007

#include "CLGOpticFlowDialog.h"
#include "FileUtils.h"
#include "ImageTrackerController.h"
#include "Logger.h"
#include "MathUtils.h"
#include "PipelineExecutor.h"
#include "wxUtils.h"

bool CLGOpticFlowDialog::TransferDataToWindow()
{
    this->slideSmoothing->SetValue(this->pipeline->GetSpatialSigma());
    this->slideRegularization->SetValue(log10(this->pipeline->GetRegularization()));
    this->slideRelaxation->SetValue(this->pipeline->GetRelaxation());
    this->slideIterations->SetValue(this->pipeline->GetIterations());
    
    // create an output file pattern from the input files
    std::string dir(this->input->GetFiles().GetDirectory());
    std::string format("clg-%04d.mha");
    unsigned int start = NumberPart(this->input->GetFiles()[0]);
    unsigned int end = start + this->input->size() - 2;
    this->panelFilePattern->SetFilePattern(FilePattern(dir, format, start, end));
    this->panelFilePattern->TransferDataToWindow();
    
    this->ViewPreview(true);
    
    return true;
}

bool CLGOpticFlowDialog::TransferDataFromWindow()
{
    std::string function("CLGOpticFlowDialog::TransferDataFromWindow");
    this->pipeline->SetSpatialSigma(this->slideSmoothing->GetValue());
    this->pipeline->SetRegularization(exp10(this->slideRegularization->GetValue()));
    this->pipeline->SetRelaxation(this->slideRelaxation->GetValue());
    this->pipeline->SetIterations(this->slideIterations->GetValue());
    
    // Create an output file set
    FileSet outFiles(this->panelFilePattern->GetFilePattern());
    this->pipeline->SetOutputFiles(outFiles);
    
    // Create and launch a pipeline executor (uses another thread)
    PipelineExecutor* exec = new PipelineExecutor(this->pipeline);
    exec->SetOpenFiles(this->checkOpenOutput->IsChecked());
    if (exec->Create() == wxTHREAD_NO_ERROR)
    {
        exec->Run();
    }
    else
    {
        Logger::warning << function << ": Unable to create threaded pipeline execution object." << std::endl;
        delete exec;
    }
    
    this->ViewPreview(false);
    return true;
}

void CLGOpticFlowDialog::SetInput(DataSource::Pointer input)
{
    this->input = input;
    this->pipeline->SetInput(this->input->GetImages());
}

void CLGOpticFlowDialog::ViewPreview(bool show)
{
    std::string function("CLGOpticFlowDialog::ViewPreview");
    if (show &&
       this->input.IsNotNull())
    {
        Logger::debug << function << ": Setting up previewing." << std::endl;
        this->visual->SetInput(this->pipeline->GetPreviewImage());
        this->visual->AddPropsTo(ImageTrackerController::Instance()->GetRenderer());
        this->preview = true;
        this->UpdatePreview();
    }
    else
    {
        this->visual->RemovePropsFrom(ImageTrackerController::Instance()->GetRenderer());
        this->UpdatePreview();
        this->preview = false;
        
    }
}

void CLGOpticFlowDialog::UpdatePreview()
{
    if (this->preview)
    {
        this->visual->Update();
        ImageTrackerController::Instance()->Render();
    }
}
        
CLGOpticFlowDialog::CLGOpticFlowDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, style)
{
    // begin wxGlade: CLGOpticFlowDialog::CLGOpticFlowDialog
    sizer_26_staticbox = new wxStaticBox(this, -1, wxT("Output"));
    sizer_27_staticbox = new wxStaticBox(this, -1, wxT("Parameters"));
    label_15 = new wxStaticText(this, -1, wxT("Spatial Smoothing"));
    slideSmoothing = new wxDoubleSlider(this, SLD_SMOOTHING);
    label_16 = new wxStaticText(this, -1, wxT("Regularization (10^x)"));
    slideRegularization = new wxDoubleSlider(this, -1);
    label_19 = new wxStaticText(this, -1, wxT("Relaxation"));
    slideRelaxation = new wxDoubleSlider(this, -1);
    label_20 = new wxStaticText(this, -1, wxT("Iterations"));
    slideIterations = new wxIntSlider(this, -1);
    panelFilePattern = new FilePatternPanel(this, -1);
    checkOpenOutput = new wxCheckBox(this, -1, wxT("Open output when done"));
    btnRun = new wxButton(this, wxID_OK, wxT("&Run"));
    btnHide = new wxButton(this, wxID_CANCEL, wxT("&Hide"));

    set_properties();
    do_layout();
    // end wxGlade
    
    //--- Custom Code ---//
    // Set up control components
    this->pipeline = CLGOpticFlowPipeline::New();
    this->visual = ScalarImageItkVtkPipeline::New();
    this->preview = false;
    
    // Set up sliders
    this->slideSmoothing->SetRange(0.5, 25.0, 0.1);
    this->slideSmoothing->SetFormat("%0.02f");
    this->slideRegularization->SetRange(1.0, 20.0, 0.5);
    this->slideRegularization->SetFormat("%0.02f");
    this->slideRelaxation->SetRange(1, 2, 0.01);
    this->slideRelaxation->SetFormat("%0.02f");
    this->slideIterations->SetRange(200, 4000);
    
    this->panelFilePattern->SetRangeEnabled(false);
    this->panelFilePattern->SetExtensionEnabled(false);
}


BEGIN_EVENT_TABLE(CLGOpticFlowDialog, wxDialog)
    EVT_SLIDER(SLD_SMOOTHING, CLGOpticFlowDialog::OnSlideSmoothing)
    // begin wxGlade: CLGOpticFlowDialog::event_table
    EVT_BUTTON(wxID_OK, CLGOpticFlowDialog::OnRun)
    EVT_BUTTON(wxID_CANCEL, CLGOpticFlowDialog::OnHide)
    // end wxGlade
END_EVENT_TABLE();

void CLGOpticFlowDialog::OnSlideSmoothing(wxCommandEvent &event)
{
    this->pipeline->SetSpatialSigma(this->slideSmoothing->GetValue());
    this->UpdatePreview();
}


void CLGOpticFlowDialog::OnRun(wxCommandEvent &event)
{
    event.Skip();
}


void CLGOpticFlowDialog::OnHide(wxCommandEvent &event)
{
    this->ViewPreview(false);
    event.Skip();
}


// wxGlade: add CLGOpticFlowDialog event handlers


void CLGOpticFlowDialog::set_properties()
{
    // begin wxGlade: CLGOpticFlowDialog::set_properties
    SetTitle(wxT("CLG Optic Flow"));
    SetSize(wxSize(550, 550));
    slideSmoothing->SetToolTip(wxT("Smoothing to apply to each input image"));
    label_16->SetMinSize(wxSize(145, 17));
    slideRegularization->SetToolTip(wxT("Weighting to apply to the global component of flow computation (higher value creates smoother flow)"));
    slideRelaxation->SetToolTip(wxT("Optimization speed parameter--1.9 is a good value"));
    slideIterations->SetToolTip(wxT("Number of flow refinement iterations for each image pair"));
    checkOpenOutput->SetToolTip(wxT("Create a new data source and open it when completed (not yet available)"));
    checkOpenOutput->Enable(false);
    btnRun->SetToolTip(wxT("Run this task"));
    btnRun->SetDefault();
    btnHide->SetToolTip(wxT("Close this dialog"));
    // end wxGlade
}


void CLGOpticFlowDialog::do_layout()
{
    // begin wxGlade: CLGOpticFlowDialog::do_layout
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_26 = new wxStaticBoxSizer(sizer_26_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_7 = new wxFlexGridSizer(1, 2, 5, 5);
    wxStaticBoxSizer* sizer_27 = new wxStaticBoxSizer(sizer_27_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_8 = new wxFlexGridSizer(4, 2, 5, 0);
    grid_sizer_8->Add(label_15, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_8->Add(slideSmoothing, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_16, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_8->Add(slideRegularization, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_19, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_8->Add(slideRelaxation, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_20, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_8->Add(slideIterations, 1, wxEXPAND, 0);
    grid_sizer_8->AddGrowableCol(1);
    sizer_27->Add(grid_sizer_8, 1, wxEXPAND, 0);
    sizer_24->Add(sizer_27, 0, wxEXPAND, 0);
    sizer_26->Add(panelFilePattern, 0, wxEXPAND, 0);
    grid_sizer_7->Add(110, 20, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_7->Add(checkOpenOutput, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_7->AddGrowableCol(1);
    sizer_26->Add(grid_sizer_7, 1, wxEXPAND, 0);
    sizer_24->Add(sizer_26, 1, wxEXPAND, 0);
    sizer_25->Add(btnRun, 0, wxADJUST_MINSIZE, 0);
    sizer_25->Add(btnHide, 0, wxADJUST_MINSIZE, 0);
    sizer_24->Add(sizer_25, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetAutoLayout(true);
    SetSizer(sizer_24);
    Layout();
    // end wxGlade
}

