// -*- C++ -*- generated by wxGlade 0.4.1 on Thu Sep 13 13:25:54 2007

#include "ScalarImageControlPanel.h"

#include "itkStatisticsImageFilter.h"

#include "wxUtils.h"

ScalarImageItkVtkPipeline::Pointer ScalarImageControlPanel::GetPipeline()
{
    return this->pipeline;
}

void ScalarImageControlPanel::SetPipeline(ScalarImageItkVtkPipeline::Pointer pipeline)
{
    this->pipeline = pipeline;
    this->TransferDataToWindow();
}

ScalarImageControlPanel::ScalarImageControlPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: ScalarImageControlPanel::ScalarImageControlPanel
    sizer_14_staticbox = new wxStaticBox(this, -1, wxT("Scalar Image"));
    sizer_42_staticbox = new wxStaticBox(this, -1, wxT("Contrast"));
    checkVisibility = new wxCheckBox(this, CBX_VISIBILITY, wxT("Visible"));
    label_36 = new wxStaticText(this, -1, wxT("Maximum"));
    slideWindowMax = new wxDoubleSlider(this, SLD_WINDOW_MAX);
    label_37 = new wxStaticText(this, -1, wxT("Minimum"));
    slideWindowMin = new wxDoubleSlider(this, SLD_WINDOW_MIN);
    label_38 = new wxStaticText(this, -1, wxT("Range"));
    const wxString comboWindowRange_choices[] = {
        wxT("8-bit"),
        wxT("16-bit"),
        wxT("From Image")
    };
    comboWindowRange = new wxComboBox(this, CMB_WINDOW_RANGE, wxT(""), wxDefaultPosition, wxDefaultSize, 3, comboWindowRange_choices, wxCB_DROPDOWN|wxCB_READONLY);

    set_properties();
    do_layout();
    // end wxGlade
    
    // Setup sliders initially (8-bit)
    this->slideWindowMax->SetRange(0.0, 255.0, 1.0);
    this->slideWindowMin->SetRange(0.0, 255.0, 1.0);
    this->slideWindowMax->SetValue(255.0);
    this->slideWindowMin->SetValue(0.0);
}


BEGIN_EVENT_TABLE(ScalarImageControlPanel, wxPanel)
    EVT_SLIDER(SLD_WINDOW_MAX, ScalarImageControlPanel::OnWindowMax)
    EVT_SLIDER(SLD_WINDOW_MIN, ScalarImageControlPanel::OnWindowMin)
    // begin wxGlade: ScalarImageControlPanel::event_table
    EVT_CHECKBOX(CBX_VISIBILITY, ScalarImageControlPanel::OnVisibility)
    EVT_COMBOBOX(CMB_WINDOW_RANGE, ScalarImageControlPanel::OnRange)
    // end wxGlade
END_EVENT_TABLE();


bool ScalarImageControlPanel::TransferDataToWindow()
{
    if (this->pipeline && this->pipeline.IsNotNull())
    {
        this->checkVisibility->SetValue(this->pipeline->GetVisibility());
        this->slideWindowMax->SetRange(this->pipeline->GetWindowMinimum(), this->pipeline->GetWindowMaximum());
        this->slideWindowMin->SetRange(this->pipeline->GetWindowMinimum(), this->pipeline->GetWindowMaximum());
        this->slideWindowMax->SetValue(this->pipeline->GetWindowMaximum());
        this->slideWindowMin->SetValue(this->pipeline->GetWindowMinimum());
    }

    return true;
}

void ScalarImageControlPanel::OnWindowMax(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
        this->pipeline->SetWindowMaximum(this->slideWindowMax->GetValue());
}

void ScalarImageControlPanel::OnWindowMin(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
        this->pipeline->SetWindowMinimum(this->slideWindowMin->GetValue());
}

void ScalarImageControlPanel::OnVisibility(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
        this->pipeline->SetVisibility(this->checkVisibility->IsChecked());
}

void ScalarImageControlPanel::OnRange(wxCommandEvent &event)
{
    if (this->pipeline && this->pipeline.IsNotNull())
    {
        typedef unsigned char EightBit;
        typedef unsigned short SixteenBit;
        
        std::string val(wx2std(this->comboWindowRange->GetValue()));
        if (val == "8-bit")
        {
            this->slideWindowMax->SetRange(std::numeric_limits<EightBit>::min(), 
                                           std::numeric_limits<EightBit>::max());
            this->slideWindowMin->SetRange(std::numeric_limits<EightBit>::min(), 
                                           std::numeric_limits<EightBit>::max());
        }
        else if (val == "16-bit")
        {
            this->slideWindowMax->SetRange(std::numeric_limits<SixteenBit>::min(), 
                                           std::numeric_limits<SixteenBit>::max());
            this->slideWindowMin->SetRange(std::numeric_limits<SixteenBit>::min(), 
                                           std::numeric_limits<SixteenBit>::max());
        }
        else // Use image min/max
        {
            typedef itk::StatisticsImageFilter< ScalarImageItkVtkPipeline::InputImageType > StatsType;
            StatsType::Pointer stats = StatsType::New();
            stats->SetInput(this->pipeline->GetInput());
            stats->Update();
            this->slideWindowMax->SetRange(stats->GetMinimum(), stats->GetMaximum());
            this->slideWindowMax->SetValue(stats->GetMaximum());
            this->slideWindowMin->SetRange(stats->GetMinimum(), stats->GetMaximum());
            this->slideWindowMin->SetValue(stats->GetMinimum());
        }
    }
}


// wxGlade: add ScalarImageControlPanel event handlers


void ScalarImageControlPanel::set_properties()
{
    // begin wxGlade: ScalarImageControlPanel::set_properties
    checkVisibility->SetToolTip(wxT("Show or hide this data set"));
    checkVisibility->SetValue(1);
    slideWindowMax->SetToolTip(wxT("Adjust the maximum displayed image value (mapped to white)"));
    slideWindowMin->SetToolTip(wxT("Adjust the minimum displayed image value (mapped to black)"));
    comboWindowRange->SetToolTip(wxT("Select the range of values visible on the sliders above"));
    comboWindowRange->SetSelection(2);
    // end wxGlade
}


void ScalarImageControlPanel::do_layout()
{
    // begin wxGlade: ScalarImageControlPanel::do_layout
    wxStaticBoxSizer* sizer_14 = new wxStaticBoxSizer(sizer_14_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_42 = new wxStaticBoxSizer(sizer_42_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_14 = new wxFlexGridSizer(3, 2, 5, 5);
    sizer_14->Add(checkVisibility, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_14->Add(label_36, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_14->Add(slideWindowMax, 1, wxEXPAND, 0);
    grid_sizer_14->Add(label_37, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_14->Add(slideWindowMin, 1, wxEXPAND, 0);
    grid_sizer_14->Add(label_38, 0, wxADJUST_MINSIZE, 0);
    grid_sizer_14->Add(comboWindowRange, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_14->AddGrowableCol(1);
    sizer_42->Add(grid_sizer_14, 1, wxEXPAND, 0);
    sizer_14->Add(sizer_42, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_14);
    sizer_14->Fit(this);
    sizer_14->SetSizeHints(this);
    // end wxGlade
}

