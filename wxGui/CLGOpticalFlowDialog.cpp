// -*- C++ -*- generated by wxGlade 0.6.3 on Thu Jul 31 15:10:16 2008

#include "CLGOpticalFlowDialog.h"

// begin wxGlade: ::extracode

// end wxGlade

#include "FilePattern.h"
#include "FileSet.h"
#include "FileUtils.h"
#include "ImageTrackerController.h"
#include "PipelineExecutor.h"
#include "wxUtils.h"

CLGOpticalFlowDialog::CLGOpticalFlowDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME)
{
    // begin wxGlade: CLGOpticalFlowDialog::CLGOpticalFlowDialog
    sizer_26_staticbox = new wxStaticBox(this, -1, wxT("Output"));
    sizer_27_staticbox = new wxStaticBox(this, -1, wxT("Parameters"));
    label_15 = new wxStaticText(this, wxID_ANY, wxT("Derivative Scale"));
    slideDerivativeScale = new wxDoubleSlider(this, SLIDE_DERIVATIVE_SCALE);
    label_16 = new wxStaticText(this, wxID_ANY, wxT("Integration Scale"));
    slideIntegrationScale = new wxDoubleSlider(this, SLIDE_INTEGRATION_SCALE);
    label_11 = new wxStaticText(this, wxID_ANY, wxT("Number of Levels"));
    slideLevels = new wxIntSlider(this, wxID_ANY);
    label_20 = new wxStaticText(this, wxID_ANY, wxT("Iterations"));
    slideIterations = new wxIntSlider(this, wxID_ANY);
    label_19 = new wxStaticText(this, wxID_ANY, wxT("Regularization"));
    slideRegularization = new wxDoubleSlider(this, wxID_ANY);
    panelFilePattern = new FilePatternPanel(this, wxID_ANY);
    checkOpenOutput = new wxCheckBox(this, wxID_ANY, wxT("Open output when done"));
    buttonRun = new wxButton(this, wxID_OK, wxT("&Run"));
    buttonHide = new wxButton(this, wxID_CANCEL, wxT("&Hide"));

    set_properties();
    do_layout();
    // end wxGlade
    
    //-- Custom code --//
    // setup control parameters
    this->preview = false;
    this->input = NULL;
    this->pipeline = MultiResolutionOpticalFlowPipeline::New();
    this->visual = ScalarImageVisualization::New();
    
    // Set up sliders
    this->slideDerivativeScale->SetRange(0.5, 20.0, 0.1);
    this->slideDerivativeScale->SetFormat("%0.2f");
    this->slideIntegrationScale->SetRange(0.5, 20.0, 0.1);
    this->slideIntegrationScale->SetFormat("%0.2f");
    this->slideLevels->SetRange(1, 8);
    this->slideIterations->SetRange(200, 4000);
    this->slideRegularization->SetRange(50.0, 1e6, 20.0);
    this->slideRegularization->SetFormat("%0.0f");
    
    this->panelFilePattern->SetRangeEnabled(false);
    this->panelFilePattern->SetExtensionEnabled(false);
}


BEGIN_EVENT_TABLE(CLGOpticalFlowDialog, wxDialog)
    // begin wxGlade: CLGOpticalFlowDialog::event_table
    EVT_BUTTON(wxID_OK, CLGOpticalFlowDialog::OnRun)
    EVT_BUTTON(wxID_CANCEL, CLGOpticalFlowDialog::OnHide)
    // end wxGlade
    EVT_SLIDER(SLIDE_DERIVATIVE_SCALE, CLGOpticalFlowDialog::OnDerivativeScale)
    EVT_SLIDER(SLIDE_INTEGRATION_SCALE, CLGOpticalFlowDialog::OnIntegrationScale)
END_EVENT_TABLE();


void CLGOpticalFlowDialog::OnRun(wxCommandEvent &event)
{
    event.Skip();
}


void CLGOpticalFlowDialog::OnHide(wxCommandEvent &event)
{
    this->ViewPreview(false);
    event.Skip();
}


// wxGlade: add CLGOpticalFlowDialog event handlers


void CLGOpticalFlowDialog::OnDerivativeScale(wxCommandEvent& event)
{
    this->pipeline->SetSpatialSigma(this->slideDerivativeScale->GetValue());
    this->UpdatePreview();
}

void CLGOpticalFlowDialog::OnIntegrationScale(wxCommandEvent& event)
{
    this->pipeline->SetIntegrationSigma(this->slideIntegrationScale->GetValue());
    this->UpdatePreview();
}

void CLGOpticalFlowDialog::set_properties()
{
    // begin wxGlade: CLGOpticalFlowDialog::set_properties
    SetTitle(wxT("CLG Optic Flow"));
    slideDerivativeScale->SetToolTip(wxT("Scale of derivative to compute structure tensor image"));
    label_16->SetMinSize(wxSize(145, 17));
    slideIntegrationScale->SetToolTip(wxT("Scale over which to integrate motion information"));
    slideLevels->SetToolTip(wxT("Number of resolution levels to use"));
    slideIterations->SetToolTip(wxT("Number of flow refinement iterations at each level"));
    slideRegularization->SetToolTip(wxT("Smoothness enforcement; needs to be very large (~10e5) for 16 bit images"));
    checkOpenOutput->SetToolTip(wxT("Create a new data source and open it when completed (not yet available)"));
    checkOpenOutput->SetValue(1);
    buttonRun->SetToolTip(wxT("Run this task"));
    buttonRun->SetDefault();
    buttonHide->SetToolTip(wxT("Close this dialog"));
    // end wxGlade
}


void CLGOpticalFlowDialog::do_layout()
{
    // begin wxGlade: CLGOpticalFlowDialog::do_layout
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_26 = new wxStaticBoxSizer(sizer_26_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_7 = new wxFlexGridSizer(1, 2, 5, 5);
    wxStaticBoxSizer* sizer_27 = new wxStaticBoxSizer(sizer_27_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_8 = new wxFlexGridSizer(5, 2, 5, 0);
    grid_sizer_8->Add(label_15, 0, 0, 0);
    grid_sizer_8->Add(slideDerivativeScale, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_16, 0, 0, 0);
    grid_sizer_8->Add(slideIntegrationScale, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_11, 0, 0, 0);
    grid_sizer_8->Add(slideLevels, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_20, 0, 0, 0);
    grid_sizer_8->Add(slideIterations, 1, wxEXPAND, 0);
    grid_sizer_8->Add(label_19, 0, 0, 0);
    grid_sizer_8->Add(slideRegularization, 1, wxEXPAND, 0);
    grid_sizer_8->AddGrowableCol(1);
    sizer_27->Add(grid_sizer_8, 1, wxEXPAND, 0);
    sizer_24->Add(sizer_27, 0, wxEXPAND, 0);
    sizer_26->Add(panelFilePattern, 0, wxEXPAND, 0);
    grid_sizer_7->Add(110, 20, 0, 0, 0);
    grid_sizer_7->Add(checkOpenOutput, 0, 0, 0);
    grid_sizer_7->AddGrowableCol(1);
    sizer_26->Add(grid_sizer_7, 1, wxEXPAND, 0);
    sizer_24->Add(sizer_26, 0, wxEXPAND, 0);
    sizer_25->Add(buttonRun, 0, 0, 0);
    sizer_25->Add(buttonHide, 0, 0, 0);
    sizer_24->Add(sizer_25, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    SetSizer(sizer_24);
    sizer_24->Fit(this);
    Layout();
    // end wxGlade
}

void CLGOpticalFlowDialog::SetInput(ImageFileSet* input)
{
    this->input = input;
    this->pipeline->SetInput(this->input);
}

void CLGOpticalFlowDialog::ViewPreview(bool show)
{
    if (this->input &&
        this->input->GetImageCount() > 0)
    {
        if (show)
        {
            this->visual->SetInput(this->pipeline->GetPreviewImage());
            this->visual->AddPropsTo(
                ImageTrackerController::Instance()->GetRenderer());
            this->preview = true;
            this->UpdatePreview();
        }
        else
        {
            this->visual->RemovePropsFrom(
                ImageTrackerController::Instance()->GetRenderer());
            this->UpdatePreview();
            this->preview = false;
        }
    }
}

void CLGOpticalFlowDialog::UpdatePreview()
{
    if (this->preview)
    {
        this->visual->Update();
        ImageTrackerController::Instance()->Render();
    }
}

bool CLGOpticalFlowDialog::TransferDataToWindow()
{
    this->slideDerivativeScale->SetValue(this->pipeline->GetSpatialSigma());
    this->slideIntegrationScale->SetValue(this->pipeline->GetIntegrationSigma());
    this->slideLevels->SetValue(this->pipeline->GetNumberOfLevels());
    this->slideIterations->SetValue(this->pipeline->GetIterations());
    this->slideRegularization->SetValue(this->pipeline->GetRegularization());
    
    // create a default output file pattern
    std::string dir(nano::wx2std(wxGetCwd()));
    CapDirectory(dir);
    std::string format("clg-%04d.mha");
    std::string example = ImageTrackerController::Instance()->GetImageFiles()[0];    
    unsigned int start = NumberPart(example);
    unsigned int end = start + this->input->GetImageCount() - 2;
    this->panelFilePattern->SetFilePattern(FilePattern(dir, format, start, end));
    this->panelFilePattern->TransferDataToWindow();
    
    // Turn on preview
    this->ViewPreview(true);
    
    return true;
}

bool CLGOpticalFlowDialog::TransferDataFromWindow()
{
    std::string function("CLGOpticFlowDialog::TransferDataFromWindow");
    this->pipeline->SetSpatialSigma(this->slideDerivativeScale->GetValue());
    this->pipeline->SetIntegrationSigma(this->slideIntegrationScale->GetValue());
    this->pipeline->SetNumberOfLevels(this->slideLevels->GetValue());
    this->pipeline->SetIterations(this->slideIterations->GetValue());
    this->pipeline->SetRegularization(this->slideRegularization->GetValue());
    
    // Create an output file set
    FileSet outFiles(this->panelFilePattern->GetFilePattern());
    this->pipeline->SetOutputFiles(outFiles);
    
    // Create and launch a pipeline executor (uses another thread)
    PipelineExecutor* exec = new PipelineExecutor(this->pipeline);
    exec->SetOpenFiles(this->checkOpenOutput->IsChecked());
    exec->SetImageResult(false); // our result is a set of vectors
    if (exec->Create() == wxTHREAD_NO_ERROR)
    {
        exec->Run();
    }
    else
    {
        Logger::warning << function << ": Unable to create threaded pipeline execution object." << std::endl;
        delete exec;
    }
    
    // turn off preview
    this->ViewPreview(false);
    return true;
}
