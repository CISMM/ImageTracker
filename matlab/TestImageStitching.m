%% Test image stitching
% Contains a set of image stitching tests.

%%

close all;
clear all;
format compact;

%% Simulated tracking data
% We simulate an image stitching scenario with a set of images with known
% tracking parameters.  The images are generated by panning a small window
% over a static image with a set of translations.

img = double(imread('/home/beastwoo/Nano/data/kier/20080821-octopus-01/oct-30umdx-0001.tif'));
h = 256;
[imgs, vx, vy] = TransformSequence(img, [h h], [10 10], [1 1], [1 1], 0, [-20 -35], 10);
ShowMovie(imgs);
[h, w, t] = size(imgs);

%%
% Extract displacement data.  |vx| and |vy| hold displacement fields, but we
% know all values should be the same for pure translation.
%
% Then, stitch images together once we have a set of images and
% displacements between frames.
tx = squeeze(vx(1,1,:));
ty = squeeze(vy(1,1,:));
trueDx = [tx ty];

figure(1); clf;
mosaic = StitchImages(imgs, trueDx);

%%
% Perform KLT tracking.  These parameters are selected by trial and error
% to perform well compared against the true displacement.  This suggests a
% general method for parameter tuning:
%
% * Generate a test sequence from a static image and a set of transforms
% presumed to be similar to the transforms present in a real image sequence
% * Use constrained optimization to determine the parameters that perform
% the best tracking (finds the closest transform match)
% * Use these parameters to perform tracking on the real image sequence.
params.derivativeScale = 0.9;
params.integralScale = 3.2;
params.featureRadius = [3 3];
params.maxFeatures = 200;
params.iterations = 5;
params.errorTolerance = 0.85;
feats = KLTTracker(imgs, params);

%%
% Show results of tracking.
figure(1); clf;
ShowFeatureMovie(imgs, feats, 1, 2);

%%
% Find translations using RANSAC.
[h, w, t] = size(imgs);
N = size(feats,2);
pos = reshape([feats.pos], [], 2, N);
active = logical(reshape([feats.active], [], N));

disp = zeros(t,2);
for frame = 2:t
    f1 = frame-1; f2 = frame;
    activeFrame = find(active(f1,:) & active(f2,:));
    tformT = RansacTranslate(squeeze(pos(f1,[2 1],activeFrame)), squeeze(pos(f2,[2 1],activeFrame)), 0.10, 0.50, 0.999)

    % the transform maps from I2 to I1, so use inverse to find I1 to I2
    % displacement.
    disp(frame,:) = -tformT';
end

kltDx = cumsum(disp);

%%

figure(1); clf;
mosaic = StitchImages(imgs, kltDx);

%% Feature-based tracking data
% Here we use a real image sequence and a KLT tracker to obtain
% feature-based tracking data.  A RANSAC implementation determines
% frame-to-frame displacement, which is used to stitch images together.
%
% First, load the image sequence.
imgs = LoadImages('/home/beastwoo/Nano/data/kier/20080821-octopus/octgrid01+30dy-%04d.tif', 20, 40, 2);
imgs = imgs(:,8:end,:);
figure(1); clf;
ShowMovie(imgs);

%%
% Perform KLT tracking.
params.derivativeScale = 0.9;
params.integralScale = 3.2;
params.featureRadius = [3 3];
params.maxFeatures = 200;
params.iterations = 5;
params.errorTolerance = 0.85;
feats = KLTTracker(imgs, params);

%%
% Show results of tracking.
figure(1); clf;
ShowFeatureMovie(imgs, feats, 1, 5);

%%
% Find translations using RANSAC.
[h, w, t] = size(imgs);
N = size(feats,2);
pos = reshape([feats.pos], [], 2, N);
active = logical(reshape([feats.active], [], N));

disp = zeros(t,2);
for frame = 2:t
    f1 = frame-1; f2 = frame;
    activeFrame = find(active(f1,:) & active(f2,:));
    tformT = RansacTranslate(squeeze(pos(f1,[2 1],activeFrame)), squeeze(pos(f2,[2 1],activeFrame)), 0.10, 0.50, 0.999);

    % the transform maps from I2 to I1, so use inverse to find I1 to I2
    % displacement.
    disp(frame,:) = -tformT';
end

kltDx = cumsum(disp);

%%

figure(1); clf;
mosaic = StitchImages(imgs, kltDx);
dispimg(mosaic(5:end-5,5:end-5));
